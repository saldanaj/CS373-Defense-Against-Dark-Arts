{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww15520\viewh13500\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Defense Against the Dark Arts Notes\
\
\
Attack Vector Graph \
- how do we look at it on how to build a defense and keep machines safe \
\
1. First contact \
- social engineering \
- email \
- phishing \
- malwaretising - when it\'92s a advertisement and when you click on the \
- other ways in the past was instant messaging \
- poison search results was another way (through SEO) - this was a problem was the past but not so much anymore\
- watering hole - try and poison the page on that one place/site (i.e. Wordpress by means of a plugin or addon) \
- physical access - airgap exploits via USB thumbdrives \
\
\
2. Local execution \
- Autorun is a good example on to run the executable on the local machine - was originally designed for CD\'92s back when we were using that technology but technology has now been limited by Microsoft \
- find out more about what SourceForge is \
- most ways of sending an exploit is through a file or through a javascript filed downloaded when visiting a site (Javascript browser plugin)\
- per security policy, if a script should not be able to write arbitrary files to the disk and then pass control to them as a policy\
- common malicious scripts are re-direct scripts, that send you a site and at that site is where the malicious executable is downloaded\
-reverse psychology social engineering \\\
\
- the ultimate goal of a malware is usually to harvest information (i.e. email addresses, passwords, etc.) \
 1. enumerate (docs, passwords, email, processes) \
 2. hook (browser, keylog, screen scrap) \
 3. parse (passwords, CC) \
 4. log \
\
\
3. Establish Presence \
- appear legitimate \
- OS like filenames or wrong path \
- change creation/modification datetime stamp - another thing to check for is when a malware is infected check the common areas of infection and check to see what\'92s been running by checking what\'92s recently installed and recenet modification dates \
- most of this is applicable to Windows \
- things installing in the Windows 32 directory\
- SVC  host - the service host process is a commonly run process that host other processes and to blend in they might run a process with a similar name (i.e. SVCH0ST - with a 0 (zero)) of svchost is running out of a different directory \
- signed files is another way to blend in - because it\'92s comes off as being innocent (find out more information about this) ************\
- root kits and boot kits - another way to blend in (modifying the master boot record)  \
\
- a big part of this is the persistence \
 - the malware wants to survive a reboot \
 - within windows theres a whole different host of ways in completing this (do more research on how this can be done) **********\
	- You can do it with services and drivers, you can do it with registry keys, you can also do it with internet explorer with a hook\
\
- remember about triaging *******************\
\
- check out sysinternals to see what\'92s autorun on startup\
- side loading hijack attack - where, in example, you have the adobe flash player legitimate executable but the executable imports a windows library to use a particular function, i.e. msimg32.dll, but the attacker has altered this library and this is their attack vector (they\'92ve replaced the legitmate windows library with their own and that\'92s what they were originally targeting, not the flash player executable) \
\
- proxy configuration - they exploit the proxy auto config setting so that when the network is available instead of specifcying the proxy settings up front you simply provide it a URL or IP where to get the configuaration from - the attackers change the configuration so that if you go to i.e. santander.com.br instead of sending you the santander site they send you somewhere else - this attack is interesting because it doesn\'92t leave any code behind.  Initially an executable is runned, an exploit is launched, the change was made to the system and the attack is deleted which makes forensics very diffifult to find artifacts\
\
- another way is when a legitimately signed executable has an exploit/vulnerability that is a buffer overflow - i.e. you can pass a long string or command line parameter to it that will execute by passing it down to the shellcode which then downloads and executes payload\
\
- another example of a malware is poalex, where htye used powershell, they write a reg key that uses a non ascii character so it\'92s hidden if you try to find it, after they install powershell that registry key will launch the power shell\
\
\
\
4. Malicious Activity \
- \
\
\
\
Going to writing some anti-malware content\
\
Behaviour based malware detection \
\
\
\
\
\
\
}